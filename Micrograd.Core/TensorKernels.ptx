//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-35583870
// Cuda compilation tools, release 12.8, V12.8.93
// Based on NVVM 7.0.1
//

.version 8.7
.target sm_52
.address_size 64

	// .globl	addVect

.visible .entry addVect(
	.param .u64 addVect_param_0,
	.param .u64 addVect_param_1,
	.param .u64 addVect_param_2,
	.param .u32 addVect_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [addVect_param_0];
	ld.param.u64 	%rd2, [addVect_param_1];
	ld.param.u64 	%rd3, [addVect_param_2];
	ld.param.u32 	%r2, [addVect_param_3];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd6];
	add.f32 	%f3, %f2, %f1;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	st.global.f32 	[%rd10], %f3;

$L__BB0_2:
	ret;

}
	// .globl	MulVect
.visible .entry MulVect(
	.param .u64 MulVect_param_0,
	.param .u64 MulVect_param_1,
	.param .u64 MulVect_param_2,
	.param .u32 MulVect_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [MulVect_param_0];
	ld.param.u64 	%rd2, [MulVect_param_1];
	ld.param.u64 	%rd3, [MulVect_param_2];
	ld.param.u32 	%r2, [MulVect_param_3];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB1_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd6];
	mul.f32 	%f3, %f2, %f1;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	st.global.f32 	[%rd10], %f3;

$L__BB1_2:
	ret;

}
	// .globl	TanhVect
.visible .entry TanhVect(
	.param .u64 TanhVect_param_0,
	.param .u64 TanhVect_param_1,
	.param .u32 TanhVect_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<24>;
	.reg .b32 	%r<10>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [TanhVect_param_0];
	ld.param.u64 	%rd2, [TanhVect_param_1];
	ld.param.u32 	%r2, [TanhVect_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB2_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	abs.f32 	%f2, %f1;
	mul.f32 	%f3, %f2, 0f4038AA3B;
	ex2.approx.ftz.f32 	%f4, %f3;
	add.f32 	%f5, %f4, 0f3F800000;
	mov.f32 	%f6, 0f3F800000;
	rcp.approx.ftz.f32 	%f7, %f5;
	mov.f32 	%f8, 0fC0000000;
	fma.rn.f32 	%f9, %f7, %f8, %f6;
	setp.ge.f32 	%p2, %f2, 0f41102CB4;
	selp.f32 	%f10, 0f3F800000, %f9, %p2;
	mov.b32 	%r6, %f10;
	mov.b32 	%r7, %f1;
	and.b32  	%r8, %r7, -2147483648;
	or.b32  	%r9, %r8, %r6;
	mov.b32 	%f11, %r9;
	mul.f32 	%f12, %f1, %f1;
	mov.f32 	%f13, 0fBD563CAE;
	mov.f32 	%f14, 0f3C80F082;
	fma.rn.f32 	%f15, %f14, %f12, %f13;
	mov.f32 	%f16, 0f3E085941;
	fma.rn.f32 	%f17, %f15, %f12, %f16;
	mov.f32 	%f18, 0fBEAAA9ED;
	fma.rn.f32 	%f19, %f17, %f12, %f18;
	mov.f32 	%f20, 0f00000000;
	fma.rn.f32 	%f21, %f19, %f12, %f20;
	fma.rn.f32 	%f22, %f21, %f1, %f1;
	setp.ge.f32 	%p3, %f2, 0f3F19999A;
	selp.f32 	%f23, %f11, %f22, %p3;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f23;

$L__BB2_2:
	ret;

}
	// .globl	ReLUVect
.visible .entry ReLUVect(
	.param .u64 ReLUVect_param_0,
	.param .u64 ReLUVect_param_1,
	.param .u32 ReLUVect_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [ReLUVect_param_0];
	ld.param.u64 	%rd2, [ReLUVect_param_1];
	ld.param.u32 	%r2, [ReLUVect_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB3_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	mov.f32 	%f2, 0f00000000;
	max.f32 	%f3, %f2, %f1;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f3;

$L__BB3_2:
	ret;

}
	// .globl	MatMulVect
.visible .entry MatMulVect(
	.param .u64 MatMulVect_param_0,
	.param .u64 MatMulVect_param_1,
	.param .u64 MatMulVect_param_2,
	.param .u32 MatMulVect_param_3,
	.param .u32 MatMulVect_param_4,
	.param .u32 MatMulVect_param_5
)
{
	.reg .pred 	%p<9>;
	.reg .f32 	%f<30>;
	.reg .b32 	%r<32>;
	.reg .b64 	%rd<34>;


	ld.param.u64 	%rd18, [MatMulVect_param_0];
	ld.param.u64 	%rd19, [MatMulVect_param_1];
	ld.param.u64 	%rd17, [MatMulVect_param_2];
	ld.param.u32 	%r14, [MatMulVect_param_3];
	ld.param.u32 	%r12, [MatMulVect_param_4];
	ld.param.u32 	%r13, [MatMulVect_param_5];
	cvta.to.global.u64 	%rd1, %rd19;
	cvta.to.global.u64 	%rd2, %rd18;
	mov.u32 	%r15, %ntid.y;
	mov.u32 	%r16, %ctaid.y;
	mov.u32 	%r17, %tid.y;
	mad.lo.s32 	%r1, %r16, %r15, %r17;
	mov.u32 	%r18, %ntid.x;
	mov.u32 	%r19, %ctaid.x;
	mov.u32 	%r20, %tid.x;
	mad.lo.s32 	%r2, %r19, %r18, %r20;
	setp.ge.s32 	%p1, %r1, %r14;
	setp.ge.s32 	%p2, %r2, %r12;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	$L__BB4_9;

	setp.lt.s32 	%p4, %r13, 1;
	mov.f32 	%f29, 0f00000000;
	@%p4 bra 	$L__BB4_8;

	add.s32 	%r22, %r13, -1;
	and.b32  	%r31, %r13, 3;
	setp.lt.u32 	%p5, %r22, 3;
	mov.f32 	%f29, 0f00000000;
	mov.u32 	%r30, 0;
	@%p5 bra 	$L__BB4_5;

	sub.s32 	%r29, %r13, %r31;
	mul.lo.s32 	%r24, %r13, %r1;
	mul.wide.s32 	%rd3, %r24, 4;
	mul.wide.s32 	%rd20, %r2, 4;
	add.s64 	%rd30, %rd1, %rd20;
	mul.wide.s32 	%rd5, %r12, 4;
	mov.f32 	%f29, 0f00000000;
	mov.u32 	%r30, 0;
	mov.u64 	%rd31, %rd2;

$L__BB4_4:
	add.s64 	%rd21, %rd31, %rd3;
	ld.global.f32 	%f12, [%rd30];
	ld.global.f32 	%f13, [%rd21];
	fma.rn.f32 	%f14, %f13, %f12, %f29;
	add.s64 	%rd22, %rd30, %rd5;
	ld.global.f32 	%f15, [%rd22];
	ld.global.f32 	%f16, [%rd21+4];
	fma.rn.f32 	%f17, %f16, %f15, %f14;
	add.s64 	%rd23, %rd22, %rd5;
	ld.global.f32 	%f18, [%rd23];
	ld.global.f32 	%f19, [%rd21+8];
	fma.rn.f32 	%f20, %f19, %f18, %f17;
	add.s64 	%rd24, %rd23, %rd5;
	add.s64 	%rd30, %rd24, %rd5;
	ld.global.f32 	%f21, [%rd24];
	ld.global.f32 	%f22, [%rd21+12];
	fma.rn.f32 	%f29, %f22, %f21, %f20;
	add.s32 	%r30, %r30, 4;
	add.s64 	%rd31, %rd31, 16;
	add.s32 	%r29, %r29, -4;
	setp.ne.s32 	%p6, %r29, 0;
	@%p6 bra 	$L__BB4_4;

$L__BB4_5:
	setp.eq.s32 	%p7, %r31, 0;
	@%p7 bra 	$L__BB4_8;

	mad.lo.s32 	%r25, %r30, %r12, %r2;
	mul.wide.s32 	%rd25, %r25, 4;
	add.s64 	%rd33, %rd1, %rd25;
	mul.wide.s32 	%rd11, %r12, 4;
	mad.lo.s32 	%r26, %r13, %r1, %r30;
	mul.wide.s32 	%rd26, %r26, 4;
	add.s64 	%rd32, %rd2, %rd26;

$L__BB4_7:
	.pragma "nounroll";
	ld.global.f32 	%f23, [%rd33];
	ld.global.f32 	%f24, [%rd32];
	fma.rn.f32 	%f29, %f24, %f23, %f29;
	add.s64 	%rd33, %rd33, %rd11;
	add.s64 	%rd32, %rd32, 4;
	add.s32 	%r31, %r31, -1;
	setp.ne.s32 	%p8, %r31, 0;
	@%p8 bra 	$L__BB4_7;

$L__BB4_8:
	mad.lo.s32 	%r27, %r1, %r12, %r2;
	cvta.to.global.u64 	%rd27, %rd17;
	mul.wide.s32 	%rd28, %r27, 4;
	add.s64 	%rd29, %rd27, %rd28;
	st.global.f32 	[%rd29], %f29;

$L__BB4_9:
	ret;

}
	// .globl	UpdateVect
.visible .entry UpdateVect(
	.param .u64 UpdateVect_param_0,
	.param .u64 UpdateVect_param_1,
	.param .f32 UpdateVect_param_2,
	.param .u32 UpdateVect_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [UpdateVect_param_0];
	ld.param.u64 	%rd2, [UpdateVect_param_1];
	ld.param.f32 	%f1, [UpdateVect_param_2];
	ld.param.u32 	%r2, [UpdateVect_param_3];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB5_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f2, [%rd5];
	mul.f32 	%f3, %f2, %f1;
	cvta.to.global.u64 	%rd6, %rd1;
	add.s64 	%rd7, %rd6, %rd4;
	ld.global.f32 	%f4, [%rd7];
	sub.f32 	%f5, %f4, %f3;
	st.global.f32 	[%rd7], %f5;

$L__BB5_2:
	ret;

}

